import { setup_response } from "../utils/methods.js";
import { defaultCommands } from "../utils/vars.js";

export default async function post_command_injection(request) {
  let results = [];
  let lstOfAttacks = defaultCommands.map((x) => `|${x}`);

  for (let index = 0; index < lstOfAttacks.length; index++) {
    const attack = lstOfAttacks[index];

    let thebody = "";
    for (let x in request.fullrequest.requestBody.formData) {
      thebody += `${x}=${request.fullrequest.requestBody.formData[x]}${attack}&`;
    }

    const theObject = {};
    theObject.fetch = `await fetch('${request.url}', {
      method: '${request.method}',
      body: '${thebody}',
    }).then((x) => x.text()).then(x=>console.log(JSON.stringify(x)))`;

    await fetch(`${request.url}`, {
      method: `${request.method}`,
      body: `${thebody}`,
    })
      .then((x) => x.text())
      .then((x) => (theObject.result = x))
      .then(() => {
        results.push(theObject);
      });
  }

  setup_response(request, results, "Command Injection");
}
